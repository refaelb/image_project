"use strict";
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const cli_ux_1 = tslib_1.__importDefault(require("cli-ux"));
const parser = tslib_1.__importStar(require("./helpers/parser"));
const tsReader = tslib_1.__importStar(require("./helpers/tsReader"));
const paths = tslib_1.__importStar(require("./helpers/paths"));
const formatter = tslib_1.__importStar(require("./helpers/formatter"));
class MongooseTsgen extends command_1.Command {
    getConfig() {
        var _a, _b;
        const { flags: cliFlags, args } = this.parse(MongooseTsgen);
        const configFileFlags = paths.getConfigFromFile(cliFlags.config);
        // remove "config" since its only used to grab the config file
        delete cliFlags.config;
        // we cant set flags as `default` using the official oclif method since the defaults would overwrite flags provided in the config file.
        // instead, well just set "output" and "project" as default manually if theyre still missing after merge with configFile.
        configFileFlags.output = (_a = configFileFlags.output) !== null && _a !== void 0 ? _a : "./src/interfaces";
        configFileFlags.project = (_b = configFileFlags.project) !== null && _b !== void 0 ? _b : "./";
        return {
            flags: Object.assign(Object.assign({}, configFileFlags), cliFlags),
            args
        };
    }
    async run() {
        const { flags, args } = this.getConfig();
        cli_ux_1.default.action.start("Generating mongoose typescript definitions");
        try {
            const extension = flags.js ? "js" : "ts";
            const modelsPaths = paths.getModelsPaths(args.model_path, extension);
            let cleanupTs;
            if (!flags.js) {
                cleanupTs = parser.registerUserTs(flags.project);
            }
            const schemas = parser.loadSchemas(modelsPaths);
            const genFilePath = paths.cleanOutputPath(flags.output);
            let sourceFile = parser.createSourceFile(genFilePath);
            sourceFile = parser.generateTypes({
                schemas,
                sourceFile,
                isAugmented: flags.augment,
                imports: flags.imports
            });
            if (!flags.js && !flags["no-func-types"]) {
                const modelTypes = tsReader.getModelTypes(modelsPaths);
                parser.replaceModelTypes(sourceFile, modelTypes, schemas, flags.augment);
            }
            cleanupTs === null || cleanupTs === void 0 ? void 0 : cleanupTs();
            cli_ux_1.default.action.stop();
            if (flags["dry-run"]) {
                this.log("Dry run detected, generated interfaces will be printed to console:\n");
                this.log(sourceFile.getFullText());
            }
            else {
                this.log(`Writing interfaces to ${genFilePath}`);
                parser.saveFile({ genFilePath, sourceFile });
                if (!flags["no-format"])
                    await formatter.format([genFilePath]);
                this.log("Writing complete üêí");
                process.exit();
            }
        }
        catch (error) {
            this.error(error);
        }
    }
}
MongooseTsgen.description = "Generate a Typescript file containing Mongoose Schema typings.\nSpecify the directory of your Mongoose model definitions using `MODEL_PATH`. If left blank, all sub-directories will be searched for `models/*.ts` (ignores `index.ts` files). Files found are expected to export a Mongoose model.";
MongooseTsgen.flags = {
    config: command_1.flags.string({
        char: "c",
        description: "[default: ./] Path of `mtgen.config.json` or its root folder. CLI flag options will take precendence over settings in `mtgen.config.json`."
    }),
    "dry-run": command_1.flags.boolean({
        char: "d",
        description: "Print output rather than writing to file."
    }),
    help: command_1.flags.help({ char: "h" }),
    imports: command_1.flags.string({
        char: "i",
        description: "Custom import statements to add to the output file. Useful if you use third-party types in your mongoose schema definitions. For multiple imports, specify this flag more than once.",
        multiple: true
    }),
    js: command_1.flags.boolean({
        char: "j",
        description: "Search for Mongoose schemas in Javascript files rather than in Typescript files. Passing this flag also triggers --no-func-types."
    }),
    output: command_1.flags.string({
        char: "o",
        description: "[default: ./src/interfaces] Path of output file containing generated typings. If a folder path is passed, the generator will default to creating a `mongoose.gen.ts` file in the specified folder."
    }),
    project: command_1.flags.string({
        char: "p",
        description: "[default: ./] Path of `tsconfig.json` or its root folder."
    }),
    augment: command_1.flags.boolean({
        description: `Augment generated interfaces into the 'mongoose' module.`
    }),
    "no-format": command_1.flags.boolean({
        description: "Disable formatting generated files with prettier."
    }),
    "no-func-types": command_1.flags.boolean({
        description: "Disable using TS compiler API for method, static, query & virtual typings."
    })
};
// path of mongoose models folder
MongooseTsgen.args = [{ name: "model_path" }];
module.exports = MongooseTsgen;
