import mongoose from "mongoose";
import { SourceFile } from "ts-morph";
declare type ModelTypes = {
    [modelName: string]: {
        methods: {
            [funcName: string]: string;
        };
        statics: {
            [funcName: string]: string;
        };
        query: {
            [funcName: string]: string;
        };
        virtuals: {
            [virtualName: string]: string;
        };
        schemaVariableName?: string;
        modelVariableName?: string;
        filePath: string;
    };
};
export declare const replaceModelTypes: (sourceFile: SourceFile, modelTypes: ModelTypes, schemas: LoadedSchemas, isAugmented: boolean) => void;
export declare const parseSchema: ({ schema: schemaOriginal, modelName, addModel, isDocument, header, footer, isAugmented }: {
    schema: any;
    modelName?: string | undefined;
    addModel?: boolean | undefined;
    isDocument: boolean;
    header?: string | undefined;
    footer?: string | undefined;
    isAugmented?: boolean | undefined;
}) => string;
export declare const getParseKeyFn: (isDocument: boolean, schema: any) => (key: string, valOriginal: any) => string;
export declare const registerUserTs: (basePath: string) => (() => void) | null;
interface LoadedSchemas {
    [modelName: string]: mongoose.Schema;
}
export declare const loadSchemas: (modelsPaths: string[]) => LoadedSchemas;
export declare const createSourceFile: (genPath: string) => SourceFile;
export declare const generateTypes: ({ sourceFile, schemas, isAugmented, imports }: {
    sourceFile: SourceFile;
    schemas: LoadedSchemas;
    isAugmented: boolean;
    imports?: string[] | undefined;
}) => SourceFile;
export declare const saveFile: ({ sourceFile }: {
    sourceFile: SourceFile;
    genFilePath: string;
}) => void;
export {};
